version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=sistema_vendas
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=sua_senha_aqui
      - JWT_SECRET=seu_jwt_secret_aqui
      - RESEND_API_KEY=sua_resend_api_key_aqui
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network

  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=sistema_vendas
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=sua_senha_aqui
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d sistema_vendas"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network

  # Servi√ßo opcional para desenvolvimento local
  backend-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=sistema_vendas_dev
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=sua_senha_aqui
      - JWT_SECRET=dev_jwt_secret
      - RESEND_API_KEY=sua_resend_api_key_aqui
    volumes:
      - .:/app
      - /app/node_modules
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    profiles:
      - dev

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
